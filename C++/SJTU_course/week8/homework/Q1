（1）面向对象的三个基本特征是：封装、继承、多态。

（2）封装：将一群对象的统一特征提取出来，抽象为一个类，类中的成员只对有权限的对象可见。

继承：一个子类或称派生类通过继承的方式可以获得一个父类或称基类的的特征和成员，这样程序员就可以在已经完成的类的基础上继续进行开发，而不用每次都重新编写已经编写过的功能。

多态：多态是指一个父类的指针可以在实例化的过程中获得子类的指针类型的赋值，这样就能使得不同类型的数据或接口使用在外部看来的同一套方法完成同一类的功能。

（3）封装：通过将同一类的成员（数据和函数等）抽象为一个类，并规定其在类中可见的权限（私有的、受保护的和共有的）以及其他需要更高权限的外部对象（如友元和友元函数等）完成类的封装。

继承：概念上的继承有一般意义的继承以及组合两种方式。一般意义的继承是指实现继承和接口继承。实现继承是指使用基类的属性和方法而无需额外编码的能力；接口继承是指仅使用属性和方法的名称、但是子类必须提供实现的能力，一般为抽象基类或者含虚函数的基类。组合是指将不同的类封装在一起完成一个新的类。

多态：多态的实现就是让子类类型的值能够被父类类型引用。多态性一般通过通过晚绑定或称动态绑定技术来实现多态，如在基类中使用虚函数，之后在子类中需要实现时再重载，在运行阶段根据子类的类型确定函数的具体实现，又或者如非虚函数通过在运行阶段根据函数的使用，确定函数的具体地址，从而确定使用的具体函数。